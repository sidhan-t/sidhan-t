// Running Sum of 1D Array

//It takes an Array as input and returns Array

// Input = [1,2,3,4,5]


func runningSum(_ num:[Int])->[Int]{
    if num.isEmpty{                    // To Check whether Array is empty or not
      return [0]
    }
    var res=[num[0]]
    for i in 1..<num.count{
        res+=[res[i-1]+num[i]]
    }
    return res                          // [1,3,6,10,15]
}



//Using High Order map function

var input = [1,2,3,4,5]
var res = 0                                   // res variable store the sum of previous and next number
print(input.map{ (res+=$0,res).1 })           // Here $0 has value same as the 'input[i]' at ith position  
                                              // (res+=$0) does the calculation and store in res variable
                                              // These (res+=$0,res) is in form of tuple, so we add .1 to consider the 1st member i.e res

print(res)                                    // It prints the value of last sum of the array i.e. 15 as an Integer not in array
                                              // If we have to return only the total sum of array then we return 'res'
                                              // map function returns array 


//Using High Order reduce function

print(input.reduce(into: []){ $0.append(($0.last ?? 0) + $1)}       // It will reduce input into '[]' and append sum of current value($0) and next value($1)




//Sum of Array
//i.e. [1,2,3,4] -> 10

//Using reduce function

var array=[1,2,3,4]
print(array.reduce(0,+))                  // reduce take first argument as initial value and second argument as what u want to do to array i.e. arithematic operations



//OR
var res=0
array.reduce(0,{res,number in res + number})

